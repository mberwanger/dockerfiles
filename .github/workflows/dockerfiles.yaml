# GENERATED FILE, DO NOT MODIFY!
#
# To update this file please edit the manifest and run:
#   go run tool/main.go generate workflow -o .github/workflows/dockerfiles.yaml
#
name: Build Docker Images

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
  schedule:
    # Run daily at 1 PM UTC (9 AM EDT / 8 AM EST)
    - cron: '0 13 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  wait-for-ci:
    name: Wait for CI to pass
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI workflow
        uses: lewagon/wait-on-check-action@v1.4.1
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          check-name: 'Verify Generated Files'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  tini-v0-19-0:
    name: "Build tini:v0.19.0"
    runs-on: ubuntu-latest
    needs: [wait-for-ci]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build tini:v0.19.0
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/base/tini/v0.19.0/Dockerfile
          image_name: tini
          image_tag: v0.19.0
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  core-bionic:
    name: "Build core:bionic"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, tini-v0-19-0]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build core:bionic
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/base/core/bionic/Dockerfile
          image_name: core
          image_tag: bionic
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  core-focal:
    name: "Build core:focal"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, tini-v0-19-0]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build core:focal
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/base/core/focal/Dockerfile
          image_name: core
          image_tag: focal
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  core-jammy:
    name: "Build core:jammy"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, tini-v0-19-0]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build core:jammy
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/base/core/jammy/Dockerfile
          image_name: core
          image_tag: jammy
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  core-noble:
    name: "Build core:noble"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, tini-v0-19-0]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build core:noble
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/base/core/noble/Dockerfile
          image_name: core
          image_tag: noble
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  corretto-21:
    name: "Build corretto:21"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build corretto:21
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/corretto/21/Dockerfile
          image_name: corretto
          image_tag: 21
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  corretto-22:
    name: "Build corretto:22"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build corretto:22
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/corretto/22/Dockerfile
          image_name: corretto
          image_tag: 22
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  corretto-24:
    name: "Build corretto:24"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build corretto:24
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/corretto/24/Dockerfile
          image_name: corretto
          image_tag: 24
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  github-runner-latest:
    name: "Build github-runner:latest"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build github-runner:latest
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/util/github-runner/latest/Dockerfile
          image_name: github-runner
          image_tag: latest
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  golang-1-25:
    name: "Build golang:1.25"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build golang:1.25
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/golang/1.25/Dockerfile
          image_name: golang
          image_tag: 1.25
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  python-3-11:
    name: "Build python:3.11"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build python:3.11
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/python/3.11/Dockerfile
          image_name: python
          image_tag: 3.11
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  python-3-12:
    name: "Build python:3.12"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build python:3.12
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/python/3.12/Dockerfile
          image_name: python
          image_tag: 3.12
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  python-3-13:
    name: "Build python:3.13"
    runs-on: ubuntu-latest
    needs: [wait-for-ci, core-noble]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build python:3.13
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/lang/python/3.13/Dockerfile
          image_name: python
          image_tag: 3.13
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  yq-4-47:
    name: "Build yq:4.47"
    runs-on: ubuntu-latest
    needs: [wait-for-ci]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Build yq:4.47
        uses: ./.github/actions/dockerfile
        with:
          dockerfile_path: images/util/yq/4.47/Dockerfile
          image_name: yq
          image_tag: 4.47
          registry: ${{ env.REGISTRY }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          image_repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

  notify:
    needs: [tini-v0-19-0, core-bionic, core-focal, core-jammy, core-noble, corretto-21, corretto-22, corretto-24, github-runner-latest, golang-1-25, python-3-11, python-3-12, python-3-13, yq-4-47]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Notify on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "✅ Docker image build completed successfully"
          # Add Slack notification here if needed

      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Docker image build failed"
          # Add Slack notification here if needed
          exit 1
