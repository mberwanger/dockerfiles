{{ generation_message }}

{{ from_image (index .Values "base_image") }}

USER root

ENV GOLANG_VERSION={{ index .Values "full_version" }}

# Multi-architecture support
RUN set -eux; \
    dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch}" in \
        amd64) \
            GOLANG_DOWNLOAD_URL="https://go.dev/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz"; \
            GOLANG_DOWNLOAD_SHA256="{{ index .Values "package_sha_amd64" }}"; \
            ;; \
        arm64) \
            GOLANG_DOWNLOAD_URL="https://go.dev/dl/go${GOLANG_VERSION}.linux-arm64.tar.gz"; \
            GOLANG_DOWNLOAD_SHA256="{{ index .Values "package_sha_arm64" }}"; \
            ;; \
        *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; \
    esac; \
    curl -fsSL --retry 3 "${GOLANG_DOWNLOAD_URL}" -o golang.tar.gz \
 && echo "${GOLANG_DOWNLOAD_SHA256}  golang.tar.gz" | sha256sum -c - \
 && tar -C /usr/local -xzf golang.tar.gz \
 && rm golang.tar.gz \
 && /usr/local/go/bin/go version

# Install git and make for Go development
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
        git \
        make \
 && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV GOPATH=/go
ENV PATH=${GOPATH}/bin:/usr/local/go/bin:${PATH}
ENV SRCPATH=${GOPATH}/src
ENV GOPRIVATE github.com/mberwanger

RUN mkdir -p ${SRCPATH} && chown -R docker:docker ${GOPATH}

WORKDIR ${SRCPATH}
USER docker
